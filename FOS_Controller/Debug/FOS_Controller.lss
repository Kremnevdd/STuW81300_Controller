
FOS_Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000682  00000716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  00000722  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000722  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001505  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5a  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b26  00000000  00000000  00002a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00003540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000695  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000092e  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000480f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_17>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  68:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  6c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  70:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  74:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  78:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_30>
  7c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  80:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_32>
  84:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  88:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  8c:	f1 00       	.word	0x00f1	; ????
  8e:	1e 01       	movw	r2, r28
  90:	36 01       	movw	r6, r12
  92:	42 01       	movw	r8, r4
  94:	57 01       	movw	r10, r14
  96:	7e 01       	movw	r14, r28
  98:	8a 01       	movw	r16, r20

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e1       	ldi	r29, 0x10	; 16
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e2 e8       	ldi	r30, 0x82	; 130
  ae:	f6 e0       	ldi	r31, 0x06	; 6
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	ac 30       	cpi	r26, 0x0C	; 12
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	ac e0       	ldi	r26, 0x0C	; 12
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	ab 31       	cpi	r26, 0x1B	; 27
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 b3 00 	call	0x166	; 0x166 <main>
  d0:	0c 94 3f 03 	jmp	0x67e	; 0x67e <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <set_attenuation>:
#define DATA 0 // Serial data pin is F0
#define CLOCK 1 // Serial data pin is F1
#define LE 2	// Serial data pin is F2

uint8_t set_attenuation(uint8_t attenuation){
	if ((attenuation>=0)&&(attenuation<32))
  d8:	80 32       	cpi	r24, 0x20	; 32
  da:	a0 f5       	brcc	.+104    	; 0x144 <set_attenuation+0x6c>
	{
		DDRF |= (1 << LE)|(1 << CLOCK)|(1 << DATA);
  dc:	e1 e6       	ldi	r30, 0x61	; 97
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	97 60       	ori	r25, 0x07	; 7
  e4:	90 83       	st	Z, r25
		PORTF &= !(1 << LE);
  e6:	e2 e6       	ldi	r30, 0x62	; 98
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	10 82       	st	Z, r1
		for(int p = 5; p >= 0; p--){
  ee:	25 e0       	ldi	r18, 0x05	; 5
  f0:	30 e0       	ldi	r19, 0x00	; 0
			PORTF &= ~(1 << CLOCK);
			PORTF &= ~(1 << DATA);
			PORTF |= (attenuation >> p) & (1 << DATA);
  f2:	a8 2f       	mov	r26, r24
  f4:	b0 e0       	ldi	r27, 0x00	; 0
	if ((attenuation>=0)&&(attenuation<32))
	{
		DDRF |= (1 << LE)|(1 << CLOCK)|(1 << DATA);
		PORTF &= !(1 << LE);
		for(int p = 5; p >= 0; p--){
			PORTF &= ~(1 << CLOCK);
  f6:	90 81       	ld	r25, Z
  f8:	9d 7f       	andi	r25, 0xFD	; 253
  fa:	90 83       	st	Z, r25
			PORTF &= ~(1 << DATA);
  fc:	90 81       	ld	r25, Z
  fe:	9e 7f       	andi	r25, 0xFE	; 254
 100:	90 83       	st	Z, r25
			PORTF |= (attenuation >> p) & (1 << DATA);
 102:	40 81       	ld	r20, Z
 104:	bd 01       	movw	r22, r26
 106:	02 2e       	mov	r0, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <set_attenuation+0x36>
 10a:	75 95       	asr	r23
 10c:	67 95       	ror	r22
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <set_attenuation+0x32>
 112:	96 2f       	mov	r25, r22
 114:	91 70       	andi	r25, 0x01	; 1
 116:	94 2b       	or	r25, r20
 118:	90 83       	st	Z, r25
			PORTF |= (1 << CLOCK);
 11a:	90 81       	ld	r25, Z
 11c:	92 60       	ori	r25, 0x02	; 2
 11e:	90 83       	st	Z, r25
uint8_t set_attenuation(uint8_t attenuation){
	if ((attenuation>=0)&&(attenuation<32))
	{
		DDRF |= (1 << LE)|(1 << CLOCK)|(1 << DATA);
		PORTF &= !(1 << LE);
		for(int p = 5; p >= 0; p--){
 120:	21 50       	subi	r18, 0x01	; 1
 122:	31 09       	sbc	r19, r1
 124:	40 f7       	brcc	.-48     	; 0xf6 <set_attenuation+0x1e>
			PORTF &= ~(1 << CLOCK);
			PORTF &= ~(1 << DATA);
			PORTF |= (attenuation >> p) & (1 << DATA);
			PORTF |= (1 << CLOCK);
		}
		PORTF &= ~(1 << CLOCK);
 126:	e2 e6       	ldi	r30, 0x62	; 98
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
		PORTF &= ~(1 << DATA);	
 130:	80 81       	ld	r24, Z
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	80 83       	st	Z, r24
		PORTF |= (1 << LE);
 136:	80 81       	ld	r24, Z
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	80 83       	st	Z, r24
		PORTF &= !(1 << LE);
 13c:	80 81       	ld	r24, Z
 13e:	10 82       	st	Z, r1
	
	return 0x11;
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	08 95       	ret
}else{
	return 0xFE;
 144:	8e ef       	ldi	r24, 0xFE	; 254
}
	}
 146:	08 95       	ret

00000148 <choose_freq_source>:
OxOf - choose RF1 as input
0xf0 - choose RF2 as input
*/

int choose_freq_source(uint8_t choice){
	DDRE |= (1 << CONTROL_1)|(1 << CONTROL_2);
 148:	92 b1       	in	r25, 0x02	; 2
 14a:	9c 60       	ori	r25, 0x0C	; 12
 14c:	92 b9       	out	0x02, r25	; 2
	if (choice == 0x0f){		//RF1 chosed as input(generator)
 14e:	8f 30       	cpi	r24, 0x0F	; 15
 150:	19 f4       	brne	.+6      	; 0x158 <choose_freq_source+0x10>
		
		PORTE &=~ (1 << CONTROL_1);
 152:	1b 98       	cbi	0x03, 3	; 3
		PORTE |= (1 << CONTROL_2);	
 154:	1a 9a       	sbi	0x03, 2	; 3
 156:	04 c0       	rjmp	.+8      	; 0x160 <choose_freq_source+0x18>
	}
	if(choice == 0xf0){			//RF2 choosed as input(external)	
 158:	80 3f       	cpi	r24, 0xF0	; 240
 15a:	11 f4       	brne	.+4      	; 0x160 <choose_freq_source+0x18>
		
		PORTE &= ~(1 << CONTROL_2);
 15c:	1a 98       	cbi	0x03, 2	; 3
		PORTE |= (1 << CONTROL_1);
 15e:	1b 9a       	sbi	0x03, 3	; 3
	}
	return 1;
	
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret

00000166 <main>:
extern SPI_TransferStruct STransferStruct;
int main(void)
{
	//uint32_t data  = 0xD8FFFFFF;
	//uint32_t data  = 0xd0aaaaaa;  
 		setRsToReciever();
 166:	0e 94 1b 03 	call	0x636	; 0x636 <setRsToReciever>
		 DDRB |= (1<< PB5);
 16a:	bd 9a       	sbi	0x17, 5	; 23
		uart1_config();
 16c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uart1_config>
	//	set_attenuation(3);
		//choose_freq_source(0x0f); // f0 - 100mhz
		spi_system_Init();
 170:	0e 94 9a 01 	call	0x334	; 0x334 <spi_system_Init>
		spi_Init(&STransferStruct);
 174:	82 e1       	ldi	r24, 0x12	; 18
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_Init>
			PORTB |= (1<<PB5);
 17c:	c5 9a       	sbi	0x18, 5	; 24
			
			int i = 0;
 17e:	00 e0       	ldi	r16, 0x00	; 0
 180:	10 e0       	ldi	r17, 0x00	; 0
						PORTB &= ~(1 << PB4);
					}
					i = 0; 
				break;	
				case 6:
				uart_recieve(&uartStruct, buffer, 1);
 182:	cc e0       	ldi	r28, 0x0C	; 12
 184:	d1 e0       	ldi	r29, 0x01	; 1
				while(!uartStruct.done);	
					choose_freq_source(buffer[0]);
					i = 0;
 186:	e1 2c       	mov	r14, r1
 188:	f1 2c       	mov	r15, r1
						i = 6;
					}
									
					break;
				case 1 : 
							spiTxBuffer[0] = buffer[2];
 18a:	0f 2e       	mov	r0, r31
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	cf 2e       	mov	r12, r31
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	df 2e       	mov	r13, r31
 194:	f0 2d       	mov	r31, r0
					if(buffer[0] == 0xff){
						i = 5;
					}	
					if (buffer[0] == 0x12)
					{
						i = 6;
 196:	0f 2e       	mov	r0, r31
 198:	f6 e0       	ldi	r31, 0x06	; 6
 19a:	2f 2e       	mov	r2, r31
 19c:	f0 2d       	mov	r31, r0
 19e:	31 2c       	mov	r3, r1
					}
					if(buffer[0] == 0xAA){
						i = 4;
					}
					if(buffer[0] == 0xff){
						i = 5;
 1a0:	0f 2e       	mov	r0, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	4f 2e       	mov	r4, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	51 2c       	mov	r5, r1
						i = 1;
					}
					if (buffer[0] == 0x52) // Read R= 0x52
					{
						//uart_recieve(&uartStruct, buffer, 1);
						i = 2;
 1aa:	68 94       	set
 1ac:	66 24       	eor	r6, r6
 1ae:	61 f8       	bld	r6, 1
 1b0:	71 2c       	mov	r7, r1
					}
	 				if(buffer[0] == 0x33){
						i = 3;
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f3 e0       	ldi	r31, 0x03	; 3
 1b6:	8f 2e       	mov	r8, r31
 1b8:	f0 2d       	mov	r31, r0
 1ba:	91 2c       	mov	r9, r1
					}
					if(buffer[0] == 0xAA){
						i = 4;
 1bc:	68 94       	set
 1be:	aa 24       	eor	r10, r10
 1c0:	a2 f8       	bld	r10, 2
 1c2:	b1 2c       	mov	r11, r1
 1c4:	05 c0       	rjmp	.+10     	; 0x1d0 <main+0x6a>
 1c6:	0a 2d       	mov	r16, r10
 1c8:	1b 2d       	mov	r17, r11
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0x6a>
					}
					if(buffer[0] == 0xff){
						i = 5;
 1cc:	04 2d       	mov	r16, r4
 1ce:	15 2d       	mov	r17, r5
				uart_transmit(&uartStruct, special_buffer, 1);
				while(!uartStruct.done);
				uartStruct.done = 0;
			}*/
			
			switch(i){
 1d0:	e0 2f       	mov	r30, r16
 1d2:	f1 2f       	mov	r31, r17
 1d4:	e7 30       	cpi	r30, 0x07	; 7
 1d6:	f1 05       	cpc	r31, r1
 1d8:	d8 f7       	brcc	.-10     	; 0x1d0 <main+0x6a>
 1da:	ea 5b       	subi	r30, 0xBA	; 186
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	0c 94 39 03 	jmp	0x672	; 0x672 <__tablejump2__>
	
				case 0 :
					uart_recieve(&uartStruct, buffer, 1);
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	64 e0       	ldi	r22, 0x04	; 4
 1e6:	71 e0       	ldi	r23, 0x01	; 1
 1e8:	ce 01       	movw	r24, r28
 1ea:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_recieve>
					//uart_recieve(&uartStruct, buffer, 1);
					while(!uartStruct.done);
 1ee:	8d 81       	ldd	r24, Y+5	; 0x05
 1f0:	88 23       	and	r24, r24
 1f2:	e9 f3       	breq	.-6      	; 0x1ee <main+0x88>
					if (buffer[0] == 0x57 ) // Write
 1f4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 1f8:	87 35       	cpi	r24, 0x57	; 87
 1fa:	59 f4       	brne	.+22     	; 0x212 <main+0xac>
					{
						uart_recieve(&uartStruct, buffer, 5);
 1fc:	45 e0       	ldi	r20, 0x05	; 5
 1fe:	64 e0       	ldi	r22, 0x04	; 4
 200:	71 e0       	ldi	r23, 0x01	; 1
 202:	ce 01       	movw	r24, r28
 204:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_recieve>
						while(!uartStruct.done);
 208:	8d 81       	ldd	r24, Y+5	; 0x05
 20a:	88 23       	and	r24, r24
 20c:	e9 f3       	breq	.-6      	; 0x208 <main+0xa2>
						i = 1;
 20e:	01 e0       	ldi	r16, 0x01	; 1
 210:	10 e0       	ldi	r17, 0x00	; 0
					}
					if (buffer[0] == 0x52) // Read R= 0x52
 212:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 216:	82 35       	cpi	r24, 0x52	; 82
 218:	29 f0       	breq	.+10     	; 0x224 <main+0xbe>
					{
						//uart_recieve(&uartStruct, buffer, 1);
						i = 2;
					}
	 				if(buffer[0] == 0x33){
 21a:	83 33       	cpi	r24, 0x33	; 51
 21c:	41 f0       	breq	.+16     	; 0x22e <main+0xc8>
						i = 3;
					}
					if(buffer[0] == 0xAA){
 21e:	8a 3a       	cpi	r24, 0xAA	; 170
 220:	91 f2       	breq	.-92     	; 0x1c6 <main+0x60>
 222:	02 c0       	rjmp	.+4      	; 0x228 <main+0xc2>
						i = 1;
					}
					if (buffer[0] == 0x52) // Read R= 0x52
					{
						//uart_recieve(&uartStruct, buffer, 1);
						i = 2;
 224:	06 2d       	mov	r16, r6
 226:	17 2d       	mov	r17, r7
						i = 3;
					}
					if(buffer[0] == 0xAA){
						i = 4;
					}
					if(buffer[0] == 0xff){
 228:	8f 3f       	cpi	r24, 0xFF	; 255
 22a:	81 f2       	breq	.-96     	; 0x1cc <main+0x66>
 22c:	02 c0       	rjmp	.+4      	; 0x232 <main+0xcc>
					{
						//uart_recieve(&uartStruct, buffer, 1);
						i = 2;
					}
	 				if(buffer[0] == 0x33){
						i = 3;
 22e:	08 2d       	mov	r16, r8
 230:	19 2d       	mov	r17, r9
						i = 4;
					}
					if(buffer[0] == 0xff){
						i = 5;
					}	
					if (buffer[0] == 0x12)
 232:	82 31       	cpi	r24, 0x12	; 18
 234:	69 f6       	brne	.-102    	; 0x1d0 <main+0x6a>
					{
						i = 6;
 236:	02 2d       	mov	r16, r2
 238:	13 2d       	mov	r17, r3
 23a:	ca cf       	rjmp	.-108    	; 0x1d0 <main+0x6a>
					}
									
					break;
				case 1 : 
							spiTxBuffer[0] = buffer[2];
 23c:	e4 e0       	ldi	r30, 0x04	; 4
 23e:	f1 e0       	ldi	r31, 0x01	; 1
 240:	82 81       	ldd	r24, Z+2	; 0x02
 242:	d6 01       	movw	r26, r12
 244:	8c 93       	st	X, r24
							spiTxBuffer[1] = buffer[3];
 246:	83 81       	ldd	r24, Z+3	; 0x03
 248:	11 96       	adiw	r26, 0x01	; 1
 24a:	8c 93       	st	X, r24
 24c:	11 97       	sbiw	r26, 0x01	; 1
							spiTxBuffer[2] = buffer[4];
 24e:	84 81       	ldd	r24, Z+4	; 0x04
 250:	12 96       	adiw	r26, 0x02	; 2
 252:	8c 93       	st	X, r24
 254:	12 97       	sbiw	r26, 0x02	; 2
							spiTxBuffer[3] = buffer[5];
 256:	85 81       	ldd	r24, Z+5	; 0x05
 258:	13 96       	adiw	r26, 0x03	; 3
 25a:	8c 93       	st	X, r24
							write_register(buffer[0], spiTxBuffer);	
 25c:	80 81       	ld	r24, Z
 25e:	b6 01       	movw	r22, r12
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 17 02 	call	0x42e	; 0x42e <write_register>
							i = 0;
 266:	0e 2d       	mov	r16, r14
 268:	1f 2d       	mov	r17, r15
					break;
 26a:	b2 cf       	rjmp	.-156    	; 0x1d0 <main+0x6a>
				case 2:
					/*read_register(buffer[1],spiRxBuffer);
					spiRxBuffer[0] = spiRxBuffer[0] & 0x07;*/


					uart_transmit(&uartStruct,buffer,5);
 26c:	45 e0       	ldi	r20, 0x05	; 5
 26e:	64 e0       	ldi	r22, 0x04	; 4
 270:	71 e0       	ldi	r23, 0x01	; 1
 272:	ce 01       	movw	r24, r28
 274:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uart_transmit>
					
					//uart_transmit(&uartStruct,spiRxBuffer,5);
					while(!uartStruct.done);
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	88 23       	and	r24, r24
 27c:	e9 f3       	breq	.-6      	; 0x278 <main+0x112>
					i = 0;
 27e:	0e 2d       	mov	r16, r14
 280:	1f 2d       	mov	r17, r15
 282:	a6 cf       	rjmp	.-180    	; 0x1d0 <main+0x6a>
				break;
				case 3:
				uart_recieve(&uartStruct, buffer, 1);
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	64 e0       	ldi	r22, 0x04	; 4
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	ce 01       	movw	r24, r28
 28c:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_recieve>
				while(!uartStruct.done);
 290:	8d 81       	ldd	r24, Y+5	; 0x05
 292:	88 23       	and	r24, r24
 294:	e9 f3       	breq	.-6      	; 0x290 <main+0x12a>
				
					if (buffer[0] == 0x01)
 296:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	21 f4       	brne	.+8      	; 0x2a6 <main+0x140>
					{
						PORTB |= (1 << PB5);
 29e:	c5 9a       	sbi	0x18, 5	; 24
					}
					else
					{
					PORTB &= ~(1 << PB5);
					}
					i = 0;
 2a0:	0e 2d       	mov	r16, r14
 2a2:	1f 2d       	mov	r17, r15
 2a4:	95 cf       	rjmp	.-214    	; 0x1d0 <main+0x6a>
					{
						PORTB |= (1 << PB5);
					}
					else
					{
					PORTB &= ~(1 << PB5);
 2a6:	c5 98       	cbi	0x18, 5	; 24
					}
					i = 0;
 2a8:	0e 2d       	mov	r16, r14
 2aa:	1f 2d       	mov	r17, r15
 2ac:	91 cf       	rjmp	.-222    	; 0x1d0 <main+0x6a>
				break;
				case 4:
					uart_recieve(&uartStruct, buffer, 1);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	64 e0       	ldi	r22, 0x04	; 4
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	ce 01       	movw	r24, r28
 2b6:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_recieve>
					while(!uartStruct.done);
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
 2bc:	88 23       	and	r24, r24
 2be:	e9 f3       	breq	.-6      	; 0x2ba <main+0x154>
					if (set_attenuation( buffer[0]) ==  0x11)
 2c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 2c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <set_attenuation>
 2c8:	81 31       	cpi	r24, 0x11	; 17
 2ca:	61 f4       	brne	.+24     	; 0x2e4 <main+0x17e>
					{
						uart_transmit(&uartStruct,buffer,1);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	64 e0       	ldi	r22, 0x04	; 4
 2d0:	71 e0       	ldi	r23, 0x01	; 1
 2d2:	ce 01       	movw	r24, r28
 2d4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uart_transmit>
						while(!uartStruct.done);
 2d8:	8d 81       	ldd	r24, Y+5	; 0x05
 2da:	88 23       	and	r24, r24
 2dc:	e9 f3       	breq	.-6      	; 0x2d8 <main+0x172>
					}
					else{
						uart_transmit(&uartStruct,error_buffer,1);
						while(!uartStruct.done);
					}
					i = 0;
 2de:	0e 2d       	mov	r16, r14
 2e0:	1f 2d       	mov	r17, r15
 2e2:	76 cf       	rjmp	.-276    	; 0x1d0 <main+0x6a>
					{
						uart_transmit(&uartStruct,buffer,1);
						while(!uartStruct.done);
					}
					else{
						uart_transmit(&uartStruct,error_buffer,1);
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	6a e0       	ldi	r22, 0x0A	; 10
 2e8:	71 e0       	ldi	r23, 0x01	; 1
 2ea:	ce 01       	movw	r24, r28
 2ec:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uart_transmit>
						while(!uartStruct.done);
 2f0:	8d 81       	ldd	r24, Y+5	; 0x05
 2f2:	88 23       	and	r24, r24
 2f4:	e9 f3       	breq	.-6      	; 0x2f0 <main+0x18a>
					}
					i = 0;
 2f6:	0e 2d       	mov	r16, r14
 2f8:	1f 2d       	mov	r17, r15
 2fa:	6a cf       	rjmp	.-300    	; 0x1d0 <main+0x6a>
				break;
				case 5:
					if (buffer[1] == 0x01)
 2fc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <buffer+0x1>
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	21 f4       	brne	.+8      	; 0x30c <main+0x1a6>
					{
						PORTB |= (1 << PB4);
 304:	c4 9a       	sbi	0x18, 4	; 24
					
					else
					{
						PORTB &= ~(1 << PB4);
					}
					i = 0; 
 306:	0e 2d       	mov	r16, r14
 308:	1f 2d       	mov	r17, r15
 30a:	62 cf       	rjmp	.-316    	; 0x1d0 <main+0x6a>
						PORTB |= (1 << PB4);
					}
					
					else
					{
						PORTB &= ~(1 << PB4);
 30c:	c4 98       	cbi	0x18, 4	; 24
					}
					i = 0; 
 30e:	0e 2d       	mov	r16, r14
 310:	1f 2d       	mov	r17, r15
 312:	5e cf       	rjmp	.-324    	; 0x1d0 <main+0x6a>
				break;	
				case 6:
				uart_recieve(&uartStruct, buffer, 1);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	71 e0       	ldi	r23, 0x01	; 1
 31a:	ce 01       	movw	r24, r28
 31c:	0e 94 1e 03 	call	0x63c	; 0x63c <uart_recieve>
				while(!uartStruct.done);	
 320:	8d 81       	ldd	r24, Y+5	; 0x05
 322:	88 23       	and	r24, r24
 324:	e9 f3       	breq	.-6      	; 0x320 <main+0x1ba>
					choose_freq_source(buffer[0]);
 326:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 32a:	0e 94 a4 00 	call	0x148	; 0x148 <choose_freq_source>
					i = 0;
 32e:	0e 2d       	mov	r16, r14
 330:	1f 2d       	mov	r17, r15
				break;	
 332:	4e cf       	rjmp	.-356    	; 0x1d0 <main+0x6a>

00000334 <spi_system_Init>:
extern SPI_TransferStruct STransferStruct;


void spi_system_Init(void){				// Hardware initialization of SPI
	
	DDRB |= (1 << 1)|(1 << 2)|(1 << 0);
 334:	87 b3       	in	r24, 0x17	; 23
 336:	87 60       	ori	r24, 0x07	; 7
 338:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << 0)|(1 << 3)|(1 << SS);
 33a:	88 b3       	in	r24, 0x18	; 24
 33c:	89 60       	ori	r24, 0x09	; 9
 33e:	88 bb       	out	0x18, r24	; 24
    SPCR |= (1 << 7)|(1 << 6)|(1 << 4)|(1<<3)|(1 << 2)|(1<<1)|(1 << 0); // Module enable, interrupt enable, M/S select, polarity, phase
 340:	8d b1       	in	r24, 0x0d	; 13
 342:	8f 6d       	ori	r24, 0xDF	; 223
 344:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1 << 3); 	
 346:	73 9a       	sbi	0x0e, 3	; 14
 348:	08 95       	ret

0000034a <spi_Init>:
	//PORTB |= (1 << SS);

}
void spi_Init(SPI_TransferStruct *spistruct){		//Software initialization of SPI
 34a:	fc 01       	movw	r30, r24
	spistruct -> ByteCounter = 0;
 34c:	16 82       	std	Z+6, r1	; 0x06
	spistruct -> spiRecieveBuf = 0;
 34e:	11 82       	std	Z+1, r1	; 0x01
 350:	10 82       	st	Z, r1
	spistruct -> spiTransmitBuf = 0;
 352:	13 82       	std	Z+3, r1	; 0x03
 354:	12 82       	std	Z+2, r1	; 0x02
	spistruct -> transferSize = 0;
 356:	15 82       	std	Z+5, r1	; 0x05
 358:	14 82       	std	Z+4, r1	; 0x04
	spistruct -> spiDone = 0;
 35a:	17 82       	std	Z+7, r1	; 0x07
 35c:	08 95       	ret

0000035e <spi_transmit>:


}


void spi_transmit(SPI_TransferStruct *spistruct,  uint8_t *RecieveBuf, uint8_t *TransmitBuf, uint8_t Size){	// Realization of transmit process
 35e:	fc 01       	movw	r30, r24
		
		if (spistruct -> ByteCounter == 0){
 360:	86 81       	ldd	r24, Z+6	; 0x06
 362:	81 11       	cpse	r24, r1
 364:	10 c0       	rjmp	.+32     	; 0x386 <spi_transmit+0x28>
			spistruct -> spiRecieveBuf = RecieveBuf ;
 366:	71 83       	std	Z+1, r23	; 0x01
 368:	60 83       	st	Z, r22
			spistruct -> spiTransmitBuf = TransmitBuf;
 36a:	53 83       	std	Z+3, r21	; 0x03
 36c:	42 83       	std	Z+2, r20	; 0x02
			spistruct -> transferSize = Size;
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	35 83       	std	Z+5, r19	; 0x05
 372:	24 83       	std	Z+4, r18	; 0x04
			uint8_t  *pData;
			pData = (uint8_t *)spistruct -> spiTransmitBuf;	
			PORTB &= ~(1<<SS); 
 374:	c0 98       	cbi	0x18, 0	; 24
			SPDR = *pData;
 376:	da 01       	movw	r26, r20
 378:	8c 91       	ld	r24, X
 37a:	8f b9       	out	0x0f, r24	; 15
			spistruct -> spiTransmitBuf++;
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	93 81       	ldd	r25, Z+3	; 0x03
 380:	01 96       	adiw	r24, 0x01	; 1
 382:	93 83       	std	Z+3, r25	; 0x03
 384:	82 83       	std	Z+2, r24	; 0x02
 386:	08 95       	ret

00000388 <interrupt_spi_happend>:

		}
}

void interrupt_spi_happend(SPI_TransferStruct *spistruct){
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	fc 01       	movw	r30, r24
	
	volatile *pDataRx;
	volatile *pDataTx;
	pDataRx = (uint8_t *)spistruct -> spiRecieveBuf;
 38e:	c0 81       	ld	r28, Z
 390:	d1 81       	ldd	r29, Z+1	; 0x01
	pDataTx = (uint8_t *)spistruct -> spiTransmitBuf;
 392:	a2 81       	ldd	r26, Z+2	; 0x02
 394:	b3 81       	ldd	r27, Z+3	; 0x03
	*pDataRx = SPDR;
 396:	8f b1       	in	r24, 0x0f	; 15
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	99 83       	std	Y+1, r25	; 0x01
 39c:	88 83       	st	Y, r24
	if (spistruct ->ByteCounter == spistruct->transferSize){
 39e:	86 81       	ldd	r24, Z+6	; 0x06
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	24 81       	ldd	r18, Z+4	; 0x04
 3a4:	35 81       	ldd	r19, Z+5	; 0x05
 3a6:	82 17       	cp	r24, r18
 3a8:	93 07       	cpc	r25, r19
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <interrupt_spi_happend+0x2e>
		 spistruct -> spiDone = 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	87 83       	std	Z+7, r24	; 0x07
		 spistruct -> ByteCounter = 0;
 3b0:	16 82       	std	Z+6, r1	; 0x06
		 PORTB |= (1 << SS);
 3b2:	c0 9a       	sbi	0x18, 0	; 24
		 PORTD |= (1 << PD7);
 3b4:	97 9a       	sbi	0x12, 7	; 18
		 
	 } 
	if( spistruct -> spiDone == 0){
 3b6:	87 81       	ldd	r24, Z+7	; 0x07
 3b8:	81 11       	cpse	r24, r1
 3ba:	10 c0       	rjmp	.+32     	; 0x3dc <interrupt_spi_happend+0x54>
		spistruct -> ByteCounter++;
 3bc:	86 81       	ldd	r24, Z+6	; 0x06
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	86 83       	std	Z+6, r24	; 0x06
		spistruct -> spiRecieveBuf++;
 3c2:	80 81       	ld	r24, Z
 3c4:	91 81       	ldd	r25, Z+1	; 0x01
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	91 83       	std	Z+1, r25	; 0x01
 3ca:	80 83       	st	Z, r24
		SPDR = *pDataTx;
 3cc:	8d 91       	ld	r24, X+
 3ce:	9c 91       	ld	r25, X
 3d0:	8f b9       	out	0x0f, r24	; 15
		spistruct -> spiTransmitBuf++;
 3d2:	82 81       	ldd	r24, Z+2	; 0x02
 3d4:	93 81       	ldd	r25, Z+3	; 0x03
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	93 83       	std	Z+3, r25	; 0x03
 3da:	82 83       	std	Z+2, r24	; 0x02
		
	}
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	08 95       	ret

000003e2 <__vector_17>:

ISR(SPI_STC_vect){
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	interrupt_spi_happend(&STransferStruct);
 404:	82 e1       	ldi	r24, 0x12	; 18
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 c4 01 	call	0x388	; 0x388 <interrupt_spi_happend>
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <write_register>:
	toTransmit[3] = 0xaa;
	spi_transmit(&STransferStruct,storage,toTransmit,3);
	while(STransferStruct.spiDone == 0);
	
} 
void write_register(uint8_t address, uint8_t *data){
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	28 97       	sbiw	r28, 0x08	; 8
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	f8 2e       	mov	r15, r24
 44a:	8b 01       	movw	r16, r22
	
	spi_Init(&STransferStruct);
 44c:	82 e1       	ldi	r24, 0x12	; 18
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	0e 94 a5 01 	call	0x34a	; 0x34a <spi_Init>
	uint8_t storage[4];
	uint8_t dataPack[4];
	dataPack[0]= (address << 3)|*data;
 454:	8f 2d       	mov	r24, r15
 456:	88 0f       	add	r24, r24
 458:	88 0f       	add	r24, r24
 45a:	88 0f       	add	r24, r24
 45c:	f8 01       	movw	r30, r16
 45e:	90 81       	ld	r25, Z
 460:	89 2b       	or	r24, r25
 462:	8d 83       	std	Y+5, r24	; 0x05
	dataPack[1]= * (data + 1);
 464:	81 81       	ldd	r24, Z+1	; 0x01
 466:	8e 83       	std	Y+6, r24	; 0x06
	dataPack[2]= * (data + 2);
 468:	82 81       	ldd	r24, Z+2	; 0x02
 46a:	8f 83       	std	Y+7, r24	; 0x07
	dataPack[3]= * (data + 3);
 46c:	83 81       	ldd	r24, Z+3	; 0x03
 46e:	88 87       	std	Y+8, r24	; 0x08
	spi_transmit(&STransferStruct,storage,dataPack,3);		/* Data in format as : 00000xxx; xxxxxxxx;xxxxxxxx;xxxxxxxx;*/
 470:	23 e0       	ldi	r18, 0x03	; 3
 472:	ae 01       	movw	r20, r28
 474:	4b 5f       	subi	r20, 0xFB	; 251
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	be 01       	movw	r22, r28
 47a:	6f 5f       	subi	r22, 0xFF	; 255
 47c:	7f 4f       	sbci	r23, 0xFF	; 255
 47e:	82 e1       	ldi	r24, 0x12	; 18
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 af 01 	call	0x35e	; 0x35e <spi_transmit>
	while(STransferStruct.spiDone == 0);
 486:	e2 e1       	ldi	r30, 0x12	; 18
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	87 81       	ldd	r24, Z+7	; 0x07
 48c:	88 23       	and	r24, r24
 48e:	e9 f3       	breq	.-6      	; 0x48a <write_register+0x5c>

	
 490:	28 96       	adiw	r28, 0x08	; 8
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	f8 94       	cli
 496:	de bf       	out	0x3e, r29	; 62
 498:	0f be       	out	0x3f, r0	; 63
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	08 95       	ret

000004a8 <uart1_config>:
{
	setUARTToTransmitter();
	while (!( UCSR1A & (1 << UDRE1)));
	UDR1 = character;
	
}
 4a8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
 4ac:	8f e2       	ldi	r24, 0x2F	; 47
 4ae:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
 4b2:	ea e9       	ldi	r30, 0x9A	; 154
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	80 81       	ld	r24, Z
 4b8:	88 61       	ori	r24, 0x18	; 24
 4ba:	80 83       	st	Z, r24
 4bc:	ed e9       	ldi	r30, 0x9D	; 157
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	8c 60       	ori	r24, 0x0C	; 12
 4c4:	80 83       	st	Z, r24
 4c6:	08 95       	ret

000004c8 <interrupt_uart_happend>:
 4c8:	fc 01       	movw	r30, r24
 4ca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RxOrTx>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	d1 f4       	brne	.+52     	; 0x506 <interrupt_uart_happend+0x3e>
 4d2:	a1 81       	ldd	r26, Z+1	; 0x01
 4d4:	b2 81       	ldd	r27, Z+2	; 0x02
 4d6:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
 4da:	8c 93       	st	X, r24
 4dc:	81 81       	ldd	r24, Z+1	; 0x01
 4de:	92 81       	ldd	r25, Z+2	; 0x02
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	92 83       	std	Z+2, r25	; 0x02
 4e4:	81 83       	std	Z+1, r24	; 0x01
 4e6:	84 81       	ldd	r24, Z+4	; 0x04
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	84 83       	std	Z+4, r24	; 0x04
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	89 13       	cpse	r24, r25
 4f0:	26 c0       	rjmp	.+76     	; 0x53e <interrupt_uart_happend+0x76>
 4f2:	14 82       	std	Z+4, r1	; 0x04
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	85 83       	std	Z+5, r24	; 0x05
 4f8:	ea e9       	ldi	r30, 0x9A	; 154
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	8f 77       	andi	r24, 0x7F	; 127
 500:	80 83       	st	Z, r24
 502:	97 9a       	sbi	0x12, 7	; 18
 504:	08 95       	ret
 506:	94 81       	ldd	r25, Z+4	; 0x04
 508:	83 81       	ldd	r24, Z+3	; 0x03
 50a:	98 17       	cp	r25, r24
 50c:	81 f0       	breq	.+32     	; 0x52e <interrupt_uart_happend+0x66>
 50e:	a1 81       	ldd	r26, Z+1	; 0x01
 510:	b2 81       	ldd	r27, Z+2	; 0x02
 512:	8c 91       	ld	r24, X
 514:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
 518:	81 81       	ldd	r24, Z+1	; 0x01
 51a:	92 81       	ldd	r25, Z+2	; 0x02
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	92 83       	std	Z+2, r25	; 0x02
 520:	81 83       	std	Z+1, r24	; 0x01
 522:	84 81       	ldd	r24, Z+4	; 0x04
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	84 83       	std	Z+4, r24	; 0x04
 528:	93 81       	ldd	r25, Z+3	; 0x03
 52a:	89 13       	cpse	r24, r25
 52c:	08 c0       	rjmp	.+16     	; 0x53e <interrupt_uart_happend+0x76>
 52e:	14 82       	std	Z+4, r1	; 0x04
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	85 83       	std	Z+5, r24	; 0x05
 534:	ea e9       	ldi	r30, 0x9A	; 154
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	8f 7b       	andi	r24, 0xBF	; 191
 53c:	80 83       	st	Z, r24
 53e:	08 95       	ret

00000540 <__vector_30>:
 540:	1f 92       	push	r1
 542:	0f 92       	push	r0
 544:	0f b6       	in	r0, 0x3f	; 63
 546:	0f 92       	push	r0
 548:	11 24       	eor	r1, r1
 54a:	2f 93       	push	r18
 54c:	3f 93       	push	r19
 54e:	4f 93       	push	r20
 550:	5f 93       	push	r21
 552:	6f 93       	push	r22
 554:	7f 93       	push	r23
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
 55a:	af 93       	push	r26
 55c:	bf 93       	push	r27
 55e:	ef 93       	push	r30
 560:	ff 93       	push	r31
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RxOrTx>
 568:	8c e0       	ldi	r24, 0x0C	; 12
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <interrupt_uart_happend>
 570:	ff 91       	pop	r31
 572:	ef 91       	pop	r30
 574:	bf 91       	pop	r27
 576:	af 91       	pop	r26
 578:	9f 91       	pop	r25
 57a:	8f 91       	pop	r24
 57c:	7f 91       	pop	r23
 57e:	6f 91       	pop	r22
 580:	5f 91       	pop	r21
 582:	4f 91       	pop	r20
 584:	3f 91       	pop	r19
 586:	2f 91       	pop	r18
 588:	0f 90       	pop	r0
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	0f 90       	pop	r0
 58e:	1f 90       	pop	r1
 590:	18 95       	reti

00000592 <__vector_32>:
 592:	1f 92       	push	r1
 594:	0f 92       	push	r0
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	0f 92       	push	r0
 59a:	11 24       	eor	r1, r1
 59c:	2f 93       	push	r18
 59e:	3f 93       	push	r19
 5a0:	4f 93       	push	r20
 5a2:	5f 93       	push	r21
 5a4:	6f 93       	push	r22
 5a6:	7f 93       	push	r23
 5a8:	8f 93       	push	r24
 5aa:	9f 93       	push	r25
 5ac:	af 93       	push	r26
 5ae:	bf 93       	push	r27
 5b0:	ef 93       	push	r30
 5b2:	ff 93       	push	r31
 5b4:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <RxOrTx>
 5b8:	8c e0       	ldi	r24, 0x0C	; 12
 5ba:	91 e0       	ldi	r25, 0x01	; 1
 5bc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <interrupt_uart_happend>
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <setUARTToTransmitter>:
 5e2:	8d 9a       	sbi	0x11, 5	; 17
 5e4:	95 9a       	sbi	0x12, 5	; 18
 5e6:	08 95       	ret

000005e8 <uart_transmit>:
		UCSR1B |= (1 << 7); //	Enable recieve interrupt
		sei();				// Enable global interrupts
	
}

void uart_transmit(UART_transferStruct *fuart, uint8_t *tData, uint8_t Size){
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
 5f4:	8b 01       	movw	r16, r22
 5f6:	f4 2e       	mov	r15, r20
	
	setUARTToTransmitter();		//  Hardware control the RS-485 chip
 5f8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <setUARTToTransmitter>
	fuart -> transferSize = Size;
 5fc:	fb 82       	std	Y+3, r15	; 0x03
	fuart -> bufferPtr = tData;
 5fe:	1a 83       	std	Y+2, r17	; 0x02
 600:	09 83       	std	Y+1, r16	; 0x01
	fuart -> RxBufferCounter = 0;
 602:	1c 82       	std	Y+4, r1	; 0x04
	fuart -> done = 0;
 604:	1d 82       	std	Y+5, r1	; 0x05
	UDR1 = *tData;
 606:	f8 01       	movw	r30, r16
 608:	80 81       	ld	r24, Z
 60a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__DATA_REGION_ORIGIN__+0x3c>
	fuart -> bufferPtr++;
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	9a 81       	ldd	r25, Y+2	; 0x02
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	9a 83       	std	Y+2, r25	; 0x02
 616:	89 83       	std	Y+1, r24	; 0x01
	fuart -> RxBufferCounter++;
 618:	8c 81       	ldd	r24, Y+4	; 0x04
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	8c 83       	std	Y+4, r24	; 0x04
	UCSR1B |= (1 << 6);
 61e:	ea e9       	ldi	r30, 0x9A	; 154
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	80 64       	ori	r24, 0x40	; 64
 626:	80 83       	st	Z, r24
	sei();				// Enable global interrupts
 628:	78 94       	sei
}
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	1f 91       	pop	r17
 630:	0f 91       	pop	r16
 632:	ff 90       	pop	r15
 634:	08 95       	ret

00000636 <setRsToReciever>:
void setUARTToTransmitter(){
	DDRD |= (1 << 5);
	PORTD |= (1 << 5);
}
void setRsToReciever(){
	DDRD |= (1 << 5);
 636:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1 << 5);
 638:	95 98       	cbi	0x12, 5	; 18
 63a:	08 95       	ret

0000063c <uart_recieve>:
	
}



void uart_recieve(UART_transferStruct *fuart, uint8_t *pData, uint8_t Size){
 63c:	ff 92       	push	r15
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	ec 01       	movw	r28, r24
 648:	8b 01       	movw	r16, r22
 64a:	f4 2e       	mov	r15, r20

		setRsToReciever();		 //  Hardware control the RS-485 chip
 64c:	0e 94 1b 03 	call	0x636	; 0x636 <setRsToReciever>
		fuart -> transferSize = Size;
 650:	fb 82       	std	Y+3, r15	; 0x03
		fuart -> bufferPtr = pData;
 652:	1a 83       	std	Y+2, r17	; 0x02
 654:	09 83       	std	Y+1, r16	; 0x01
		fuart -> RxBufferCounter = 0;
 656:	1c 82       	std	Y+4, r1	; 0x04
		fuart ->done = 0;
 658:	1d 82       	std	Y+5, r1	; 0x05
		UCSR1B |= (1 << 7); //	Enable recieve interrupt
 65a:	ea e9       	ldi	r30, 0x9A	; 154
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	80 68       	ori	r24, 0x80	; 128
 662:	80 83       	st	Z, r24
		sei();				// Enable global interrupts
 664:	78 94       	sei
	
}
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	ff 90       	pop	r15
 670:	08 95       	ret

00000672 <__tablejump2__>:
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	05 90       	lpm	r0, Z+
 678:	f4 91       	lpm	r31, Z
 67a:	e0 2d       	mov	r30, r0
 67c:	09 94       	ijmp

0000067e <_exit>:
 67e:	f8 94       	cli

00000680 <__stop_program>:
 680:	ff cf       	rjmp	.-2      	; 0x680 <__stop_program>
